import React from 'react';
<<<<<<< HEAD
import { WorkShopNote } from '../../reusables/workshop-note'
import useLocalStorageState from '../../utils/localstorage'
import file from './01.md'


function Board() {
  const [squares, setSquares] = useLocalStorageState('board',Array(9).fill(null));

  const nextValue = calculateNextValue(squares)
  const winner = calculateWinner(squares)
  const status = calculateStatus(squares,winner,nextValue)

  //const squares = Array(9).fill(null);

  function calculateNextValue(squares){

  const Xplay = squares.filter((xPlay) => xPlay === 'X' ).length;
  const Oplay = squares.filter((oPlay) => oPlay === '0').length;
  return Oplay === Xplay ? 'X' : '0';

  }

  function calculateWinner(squares){

    const lines = [
      [0,1,2],
      [3,4,5],
      [6,7,8],
      [0,3,6],
      [1,4,7],
      [2,5,8],
      [0,4,8],
      [2,4,6]
  ]

  for(let i = 0; i < lines.length; i++){
    const [a,b,c] = lines[i];

    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){
      return squares[a];
    }
  }
  return null;
  }

  function calculateStatus(squares,winner,nextValue){

    return winner
    ? `Winner: ${winner}`
    :squares.every(Boolean)
    ?`Scratch: Cat's game`
    :`Next player: ${nextValue}`


  }
  

  function renderSquare(i) {
    return (
      <button className="square" onClick={() => selectSquare(i)}>
        {squares[i]}
      </button>
    )
  }

  function selectSquare(square) {
    if(winner || squares[square] === true){
      return;
    }
    const squareCopy = [...squares]
    squareCopy[square] = nextValue
    setSquares(squareCopy)
  }

  function restart() {
    setSquares(Array(9).fill(null));

  }

  return (
    <div>
      <div className="status">{status}</div>
      <div className="board-row">
        {renderSquare(0)}
        {renderSquare(1)}
        {renderSquare(2)}
      </div>

      <div className="board-row">
        {renderSquare(3)}
        {renderSquare(4)}
        {renderSquare(5)}
      </div>

      <div className="board-row">
        {renderSquare(6)}
        {renderSquare(7)}
        {renderSquare(8)}
      </div>

      <button className="restart" onClick={restart}>restart</button>
    </div>
  )
}

function Game() {
    
  return(
      <div className="game">
        <div className="game-board">
            <Board />
        </div>
      </div>

  ) 


}

function App() {
  return (
    <div className="grid-container">
      <WorkShopNote file={file} />
      <Game />
    </div>
  )
}

export default App;



=======
import file from './01.md';

import { WorkShopNote  } from "../../reusables/workshop-note";

function Board() {
    // 🐨 squares is the state for this component. Add useState for squares
    const squares = Array(9).fill(null);

    //We will define our derived state here :
    // - nextValue ( 'X' or '0')
    // - winner ('X', '0', or null )
    // - status (`Winner: ${winner}`, `Scratch: Cat's game`, or `Next player: ${nextValue}`)
    // 💰 The calculations are written below for you! So you can use the utilities
    // below to create these variables


    //This function is executed by your square click handler, `square` is index
    function selectSquare(square) {
        // 🐨 first, if there's already winner or there's already a value at the
        // given square index (like someone clicked a square that's already been
        // clicked), then return early so we don't make any state changes
        //
        // 🦉 It's typically a bad idea to mutate or directly change state in React.
        // Doing so can lead to subtle bugs that can easily slip into production.
        //
        // 🐨 make a copy of the squares array
        // 💰 `[...squares]` will do it!)
        //
        // 🐨 set the value of the square that was selected
        // 💰 `squaresCopy[square] = nextValue`
        //
        // 🐨 set the squares to your copy        
    }

    function restart() {
        // 🐨 reset the squares
        // 💰 `Array(9).fill(null)` will do it!
    }

    function renderSquare(i) {
        return (
            <button className="square" onClick={() => selectSquare(i)}>
                {squares[i]}
            </button>
        )
    }

    return (
        <div>
            {/* 🐨 put the status in the div below */}
            <div className="status">STATUS</div>
            <div className="board-row">
                {renderSquare(0)}
                {renderSquare(1)}
                {renderSquare(2)}
            </div>
            <div className="board-row">
                {renderSquare(3)}
                {renderSquare(4)}
                {renderSquare(5)}
            </div>
            <div className="board-row">
                {renderSquare(6)}
                {renderSquare(7)}
                {renderSquare(8)}
            </div>
            <button className="restart" onClick={restart}>
                restart
        </button>
        </div>
    )
}

function Game() {
    return (
        <div className="game">
            <div className="game-board">
                <Board />
            </div>
        </div>
    )
}


// eslint-disable-next-line no-unused-vars
function calculateStatus(winner, squares, nextValue) {
    return winner
        ? `Winner: ${winner}`
        : squares.every(Boolean)
            ? `Scratch: Cat's game`
            : `Next player: ${nextValue}`
}

// eslint-disable-next-line no-unused-vars
function calculateNextValue(squares) {
    const xSquaresCount = squares.filter(r => r === 'X').length
    const oSquaresCount = squares.filter(r => r === 'O').length
    return oSquaresCount === xSquaresCount ? 'X' : 'O'
}

// eslint-disable-next-line no-unused-vars
function calculateWinner(squares) {
    const lines = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6],
    ]
    for (let i = 0; i < lines.length; i++) {
        const [a, b, c] = lines[i]
        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
            return squares[a]
        }
    }
    return null
}

function App() {
    return (
        <div className="grid-container">
            <WorkShopNote file={file} />
            <Game />
        </div>
    )
}

export default App
>>>>>>> origin/master
